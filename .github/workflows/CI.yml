name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - "1"
        os:
          - macOS-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v3
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
          include-all-prereleases: true
      - uses: actions/cache@v3
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@latest
      - uses: julia-actions/julia-runtest@latest
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v4
        with:
          file: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false # or true if you want CI to fail when Codecov fails
  docs:
    name: Build and Deploy Documentation
    runs-on: ubuntu-latest
    # Add this permissions block to allow pushing to gh-pages
    permissions:
      contents: write
    # This job only needs to run on one Julia version
    steps:
      # 1. Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Set up Julia (e.g., v1.10)
      - name: Set up Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: "1"

      # 3. Cache dependencies
      - name: Cache Julia dependencies
        uses: julia-actions/cache@v2

      # 4. Install documentation dependencies
      #    This is the most critical step for an unregistered package.
      - name: Install documentation dependencies
        run: |
          # First, instantiate the main package's dependencies
          julia --color=yes --project=. -e 'using Pkg; Pkg.instantiate()'

          # Then, activate the docs environment, develop the main package,
          # and instantiate the docs-specific dependencies.
          julia --color=yes --project=docs -e '
            using Pkg
            Pkg.develop(path=".")
            Pkg.instantiate()'

      # 5. Build and deploy the documentation
      #    The GITHUB_TOKEN is automatically provided by GitHub Actions.
      #    Documenter.jl will detect it's in a CI environment and use it.
      - name: Build and deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: julia --project=docs docs/make.jl
